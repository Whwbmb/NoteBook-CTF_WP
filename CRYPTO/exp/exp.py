from Crypto.Util.number import long_to_bytes, GCD
import gmpy2


# exp1

# 已知参数（直接贴出大整数）
n1 = 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037

n2 = 12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047

c1 = 12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120

# 1. 计算公因子 q
q = GCD(n1, n2)

# 2. 计算另一个素因子 p，使得 n1 = p * q
p = n1 // q

# 3. 计算 φ(n1) = (p - 1) * (q - 1)
phi = (p - 1) * (q - 1)

# 4. 已知公钥指数 e
e = 52361

# 5. 计算私钥 d，使得 e · d ≡ 1 (mod φ(n1))
d = gmpy2.invert(e, phi)

# 6. 用私钥 d 解密 c1
m = pow(c1, int(d), n1)

# 7. 将得到的整数还原为字节串，即明文 flag
flag = long_to_bytes(m)
print(flag)





# exp2
P1 = 2201440207
P2 = 4171911923
P3 = 2585574697
P4 = 3989697563
P5 = 4044505687
P6 = 2151018733
P7 = 2758708999
P8 = 2923522073
P9 = 2767137487
P10 = 4021078331
P11 = 2906576131
P12 = 2315495107
P13 = 3355651511
P14 = 3354884521
P15 = 2719600579
n=P1*P2*P3*P4*P5*P6*P7*P8*P9*P10*P11*P12*P13*P14*P15
phi=(P1-1)*(P2-1)*(P3-1)*(P4-1)*(P5-1)*(P6-1)*(P7-1)*(P8-1)*(P9-1)*(P10-1)*(P11-1)*(P12-1)*(P13-1)*(P14-1)*(P15-1)
e=65537
d=gmpy2.invert(e,phi)
c = 12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717
m = pow(c,d,n)
print(long_to_bytes(m))
